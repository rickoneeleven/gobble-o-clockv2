Context: Combined Project Brief & Phased Plan for Wear OS Fasting Heart Rate Monitor v2. This file replaces the initial MANIFEST and serves as the primary project reference. This plan is dynamic and expected to change.

--- Project Brief & Specifications ---

Project Objective:
- Create a personal Wear OS application for Galaxy Watch 4+ monitoring real-time heart rate to identify sustained lower periods (potential fasting correlation).
- Runs primarily as a background Foreground Service.
- Samples heart rate approximately once per minute (using a time gate filter).
- Triggers a one-time alert (vibrate/beep) and enters "Gobble Time" state after 5 consecutive processed readings <= user-defined Target Heart Rate.
- Monitoring stops in "Gobble Time" state and only resumes after manual user "Reset".
- Application state (`appState`, `consecutiveCount`) must persist across app/watch restarts.

Target Platform & Tech Stack:
- Target Device: Samsung Galaxy Watch 4 or later (Wear OS 3+).
- Development Environment: Android Studio on macOS.
- Language: Kotlin.
- Core Libraries: Compose for Wear OS (UI), Jetpack DataStore (Preferences for persistence), Health Services API (passive heart rate monitoring), Lifecycle Service (background execution), Coroutines, ViewModel.
- Version Control: Git.

Core Principles:
- Simplicity: Easy to understand and use.
- Clarity: Code and UI should be clear.
- Battery Consciousness: Prioritize minimizing battery drain (using Passive Monitoring, Foreground Service best practices, unregistering listener when idle).
- Mandatory Logging: Implement detailed Logcat logging AND persistent file logging viewable within the app for debugging/tweaking.
- User-Centric: Designed for the primary user's specific needs (initially the developer).
- No Automated Tests: Focus on manual testing for this version.

Key Design Decisions & Logic Details:
- Target Heart Rate: User-defined via app setting. User is responsible for determining the appropriate value; no in-app guidance provided. Default: 70 bpm.
- Sampling Logic: Uses Health Services Passive Listener. To ensure reliability and avoid reacting to transient dips/noise, a time gate (`currentTimeMillis >= lastProcessedTimestamp + ~55000ms`) is applied. Only *one* reading (the latest in a batch) is processed if the gate condition passes. This aims for roughly 1-minute intervals between *processed* readings but depends on Health Services delivery timing.
- Consecutive Reading Definition: "Consecutive" refers to 5 *sequentially processed readings* (i.e., readings that passed the ~1min time gate) that are <= `targetHeartRate`. The actual time elapsed between these processed readings might be more than 1 minute if data delivery is sparse.
- Alert Mechanism: A single, one-time system notification (vibrate/beep) is triggered when entering "Gobble Time". If missed, user must manually check the app. This is acceptable for v2.
- State Persistence (DataStore Keys & Types):
    - `appState`: String ("MONITORING" / "GOBBLE_TIME"), Default: "MONITORING"
    - `consecutiveCount`: Integer (0-5), Default: 0
    - `targetHeartRate`: Integer, Default: 70
    - `lastProcessedTimestamp`: Long (epoch ms), Default: 0
    - `lastDisplayedHr`: Integer (optional, for smoother UI updates), Default: 0
- Background Execution: Mandatory Foreground Service with a persistent notification indicating active monitoring.
- Permissions (`BODY_SENSORS`, `POST_NOTIFICATIONS` [for Android 13+ alerts]):
    - App UI checks on launch/resume. If denied, displays explanation and "Grant Permission" button triggering system request. Blocks function until granted.
    - Service checks on start and stops itself if permission is not granted or revoked.
- In-App Logging: A dedicated UI screen will display timestamped logs read from a persistent file stored in app-internal storage. Will include key events (service state, HR processing, state changes, resets, errors). Basic log management (clear button or rotation) required.

--- Phased Implementation Plan (todo.txt format) ---

--- Phase 0: Project Setup & Foundation ---

[COMPLETED] - Create local Git repository for the project.
[COMPLETED] - Create remote Git repository (e.g., GitHub, GitLab) and link local repo.
[COMPLETED] - Create a new Wear OS project in Android Studio (using "Empty Wear App" template - Kotlin, Compose).
[COMPLETED] - Configure initial `.gitignore` to ignore `.idea/`, `local.properties`, `build/` etc.
[COMPLETED] - Commit initial project structure and gitignore to Git.

- Configure `gradle/libs.versions.toml` and `app/build.gradle.kts` with *remaining* necessary dependencies: Health Services, Jetpack DataStore (Preferences), ViewModel, Lifecycle Service, Coroutines (if not already present).
    - `androidx.health:health-services-client`
    - `androidx.datastore:datastore-preferences`
    - `androidx.lifecycle:lifecycle-viewmodel-ktx`
    - `androidx.lifecycle:lifecycle-viewmodel-compose`
    - `androidx.lifecycle:lifecycle-service`
    - `org.jetbrains.kotlinx:kotlinx-coroutines-android` (verify if present)

- Sync Gradle project (`File` > `Sync Project with Gradle Files`).

- Verify basic project setup runs on an emulator or physical Galaxy Watch 4+ after adding dependencies.

- Set up initial project structure (packages: e.g., `presentation`, `service`, `data`, `logging`, `util`) under `app/src/main/java/com/example/gobble_o_clockv2/`. (Note: Template uses `presentation` already).

- Commit dependency and package structure setup to Git.

--- Phase 1: Persistence Layer (DataStore) ---

- Define DataStore preference keys as specified in Project Brief (`appState`, `consecutiveCount`, `targetHeartRate`, `lastProcessedTimestamp`, `lastDisplayedHr`) in a suitable constants file (e.g., `data/DataStoreKeys.kt`).

- Define `AppState` enum or sealed class/constants ("MONITORING", "GOBBLE_TIME").

- Create a `PreferencesRepository` class encapsulating DataStore read/write operations using Kotlin Flows. Implement functions for each key with defaults. Use dependency injection principles if comfortable, or simple instantiation for now.

- Add basic unit tests or manual checks for DataStore read/write functionality if feasible without full UI/Service.

- Commit persistence layer to Git.

--- Phase 2: Background Service & Health Services Integration ---

- Create `HeartRateMonitorService` class extending `LifecycleService` in the `service` package.

- Implement basic Service lifecycle (`onCreate`, `onStartCommand`, `onDestroy`).

- Implement Foreground Service requirements: notification channel (create in `onCreate`), persistent notification builder, `startForeground` call (in `onStartCommand`).

- Add necessary permissions to `app/src/main/AndroidManifest.xml`: `FOREGROUND_SERVICE`, `BODY_SENSORS`, `POST_NOTIFICATIONS` (for Android 13+ alerts/foreground notification). `WAKE_LOCK` is already present from template - review if strictly needed later.

- Instantiate `PassiveMonitoringClient` in the Service.

- Implement `BODY_SENSORS` permission check within Service start logic (log error & stop service if denied initially).

- Implement `registerPassiveListener()` function using `passiveMonitoringClient.registerPassiveListenerCallback()`. Use appropriate permissions check *before* registering.

- Implement `unregisterPassiveListener()` function using `passiveMonitoringClient.unregisterPassiveListenerCallback()`.

- Implement the `PassiveListenerCallback` logic: initially log received `DataPoint<HeartRateBpm>` details.

- Commit initial service and Health Services setup to Git.

--- Phase 3: Core Monitoring Logic (in Service) ---

- Inject or provide `PreferencesRepository` to `HeartRateMonitorService`.

- Read initial state (`appState`, `consecutiveCount`, etc.) from DataStore on Service start.

- Implement the ~1 minute sampling gate logic in the listener callback using `lastProcessedTimestamp` (as per Project Brief). Log processed/skipped status.

- If reading processed: update `lastDisplayedHr` (if used), update `lastProcessedTimestamp` in DataStore.

- Implement target comparison (`processed HR <= targetHeartRate`).

- Implement consecutive count update logic (increment or reset to 0). Update `consecutiveCount` in DataStore. Log count changes.

- Implement trigger logic (`consecutiveCount >= 5`): update `appState` to `GOBBLE_TIME` in DataStore.

- Implement logic to call `unregisterPassiveListener()` when `appState` becomes `GOBBLE_TIME`. Log state change and unregistration.

- Enhance Logcat logging for all steps in this phase.

- Commit core service logic to Git.

--- Phase 4: Basic User Interface (Compose & ViewModel) ---

- Create `MainViewModel` extending `ViewModel` in the `presentation` package. Inject `PreferencesRepository`.

- Expose `StateFlow`s from `MainViewModel` for `appState`, `targetHeartRate`, `consecutiveCount`, `lastDisplayedHr`, collecting from the repository flows.

- Refactor `MainActivity` to use the `MainViewModel`.

- Update the main `WearApp` composable (or create new ones) to observe the ViewModel's state. Use appropriate Wear Compose components (e.g., `Scaffold`, `ScalingLazyColumn`, `Button`, `Text`).

- Create the "Monitoring" screen composable: Display data from ViewModel. Include access point for Settings (e.g., a button).

- Create the "Gobble Time" screen composable: Display text and "Reset" button. Conditionally display this or Monitoring screen based on `appState`.

- Create basic "Settings" screen/dialog composable (can navigate to this): Display/edit `targetHeartRate` using `TextField` or `Stepper`. Implement saving via ViewModel/Repository.

- Commit basic UI and ViewModel structure to Git.

--- Phase 5: Connecting UI, Service & Reset Logic ---

- Implement logic in `MainActivity` (`LaunchedEffect` or similar) to check `appState`. If `MONITORING` & permissions granted, start `HeartRateMonitorService` in foreground.

- Implement "Reset" button action: call ViewModel function -> update `appState` to `MONITORING` & `consecutiveCount` to 0 in DataStore.

- In `HeartRateMonitorService`, collect the `appState` flow from the repository.

- Implement Service logic reacting to `appState` changes: If changes `GOBBLE_TIME` -> `MONITORING` (Reset), call `registerPassiveListener()`. Log re-registration.

- Ensure UI correctly updates based on `appState` changes from Service or Reset button.

- Commit UI-Service connection and Reset logic to Git.

--- Phase 6: Alerting & Permissions UI Refinement ---

- Implement alert function in Service: On state -> `GOBBLE_TIME`, use `NotificationManager` for the one-time alert (separate channel, vibration/sound). Check for `POST_NOTIFICATIONS` permission on Android 13+ before posting.

- Refine permission handling in `MainActivity`: Add explicit checks for `BODY_SENSORS` and `POST_NOTIFICATIONS` (if API >= 33) on start/resume. Use Accompanist permissions library or manual checks.

- If permission denied in UI: Display explanation composable with "Grant Permission" button triggering system request flow(s). Conditionally render main UI based on permission status.

- Test permission grant/deny flow from UI. Ensure Service still handles runtime revocation correctly.

- Commit alerting and refined permission handling to Git.

--- Phase 7: Persistent Logging & In-App Viewer ---

- Create `FileLogger` utility (object or class) for writing timestamped logs to a file (`context.filesDir`).

- Decide on log format and implement basic file writing (append mode). Consider thread safety if called from multiple places concurrently.

- Integrate `FileLogger.log(...)` calls alongside `Log.d/i/e` for specified key events (service state, HR processing, comparison, count, state changes, reset, errors, permissions).

- Create "LogViewerScreen" composable.

- Add navigation to LogViewerScreen (e.g., button on Monitoring screen, maybe hidden in Settings).

- Implement ViewModel/logic for LogViewerScreen to read log file content.

- Display logs in `ScalingLazyColumn` (newest first likely preferred).

- Add "Clear Logs" button functionality. Consider basic rotation/size limit if needed later.

- Commit logging implementation and viewer UI to Git.

--- Phase 8: Testing, Refinement & Optimization ---

- Perform thorough manual testing on emulator and physical Galaxy Watch 4+.

- Test Scenario: Background Reliability (long duration runs).

- Test Scenario: Sampling Accuracy (check file logs vs. ~1min goal, tune gate value if needed).

- Test Scenario: State Persistence (restarts).

- Test Scenario: Trigger Logic (various HR inputs).

- Test Scenario: Reset Logic.

- Test Scenario: Permissions Flow (grant, deny, revoke, including Notifications).

- Test Scenario: Alerting (verify notification triggers).

- Test Scenario: Log Viewer (verify logs captured, displayed, cleared).

- Monitor battery drain on physical device. Optimize if necessary (ensure listener unregisters, check wake locks if any were added inadvertently - `WAKE_LOCK` permission might be removable).

- Refine UI/UX based on testing.

- Add `try-catch` blocks around file I/O, DataStore, Health Services calls. Log errors to both Logcat and file logger.

- Commit testing fixes and refinements to Git.

--- Phase 9: Final Polish & Documentation ---

- Code review and refactoring for clarity, efficiency.

- Add/review code comments.

- Review all log messages (Logcat & file) for clarity.

- Update project `README.md` with setup, usage, logic explanation (Target HR, Sampling), known issues.

- Create release build configuration if needed (e.g., enable minifaction, code shrinking).

- Final code backup and repository cleanup/tagging.

- Project Complete (v2).